## To get the inverse of ''s''
k <- s$getInverse()
k <<- NULL
set <- function(y){
s <<- q
k <<- NULL
}
get <- function()s
setInverse <- function(inverse) k <<- inverse
getInverse <- function() k
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
##Programming Assignment 2 by Srikar Reddy
makeCacheMatrix <- function(s = matrix()) {
k <- NULL
set <- function(y){
s <<- q
k <<- NULL
}
get <- function()s
setInverse <- function(inverse) k <<- inverse
getInverse <- function() k
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(s, ...) {
## To get the inverse of ''s''
k <- s$getInverse()
if(!is.null(k)){
message("getting cached data")
return(k)
}
mat <- s$get()
k <- solve(mat,...)
s$setInverse(k)
k
}
1 1
1
2
2 2
2 2 1 1 2
1 1
[1 1]
k <- solve(mat,...)
k <- solve(mat,...)
#  To return a matrix that is the inverse of 'x'
inv <- x$getinverse()
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
x <<- y
inverse <- NULL
set <- function(y)
{
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(inv) inverse <<- inv
getinverse <- function() inverse
list(set=set,get=get,setinverse=setinverse,
getinverse=getinverse)
# the function makeCacheMatrix below creates a special matrix object that can cache its inverse
makeCacheMatrix <- function(x = matrix())
{
inverse <- NULL
set <- function(y)
{
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(inv) inverse <<- inv
getinverse <- function() inverse
list(set=set,get=get,setinverse=setinverse,
getinverse=getinverse)
}
cacheSolve <- function(x, ...)
{
#  To return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv))
{
message("getting cached matrix")
return(inv)
}
data <- x$get()
inv <- solve(data,...)
x$setinverse(inv)
inv
}
a24 <<- wb
a24 <<- y
inverse <<- NULL
set <- function(y)
{
a24 <<- y
inverse <<- NULL
}
get <- function() a24
setinverse <- function(inv) inverse <<- inv
getinverse <- function() inverse
list(set=set,get=get,setinverse=setinverse,
getinverse=getinverse)
makeCacheMatrix(a24 = matrix(1:4,2,2))
makeCacheMatrix(a24 = matrix(1:4,2,2))
